require "crypto";
require "mime"; -- not exactly needed ;)
--[[
--require "bdx";
function tobin(s)
	out='';
	s=tonumber(s);
	while s>=1 do
		if (s%2 ~= 0) then
			out="1"..out
		else
			out="0"..out;
		end;
		s=math.floor(s/2);
	end;
	return out;
end
function tobin_r(s)
	out='';
	s=tonumber(s);
	while s>=1 do
		if (s%2 ~= 0) then
			out=out.."1"
		else
			out=out.."1";
		end;
		s=math.floor(s/2);
	end;
	return out;
end
]]

local evp = crypto.evp;

if not arg[1] or not arg[2] then print("Add password as 1 argument and salt as 2"); os.exit(1);end
key=arg[1];
psalt=arg[2];
algo = "sha512"
hashsize = 64;
ID = 6;

--[[ parse rounds from salt, if it is present ]]
rounds,salt=nil;
rounds,salt=psalt:match("rounds=(%d+)[$](.*)");
if not salt and not rounds then
salt=psalt;
rounds=5000; --[[ default value for both sha512 and sha256]]
end;
--print("salt: "..salt)
--print("rounds: "..rounds)

--[[ starting digest A ]]
A = evp.new(algo);
A:update(key);
A:update(salt);

--[[ starting digest B ]]
B = evp.new(algo);
B:update(key);
B:update(salt);
B:update(key);
B_D = B:digest(nil,true);
-----------------------
Bint='';
--print("B: "..B_D);
for i=1,B_D:len() do
Bint=Bint..B_D:sub(i,i):byte().." ";
end
print("B: "..Bint)

----------------------
BpA = "";
Lk = key:len();

while Lk>hashsize do
	--BpA = BpA..B_D;
	A:update(B_D)
	Lk = Lk-hashsize;
end;

--BpA = BpA..B_D:sub(0,Lk);
A:update(B_D:sub(0,Lk));
--print(Lk);
--print(B_D:sub(0,Lk))
--print(BpA);
--A:update(BpA);


--BpA = ""; -- clear it for new usage ;)
--bLk = bdx.Dec2Bin(Lk);
--[[for i in bLk:gmatch("%d") do
	if i == "1" then
		BpA=B_D..BpA;
	elseif i == "0" then
		BpA=key..BpA;
	end;
end]]
Lk = key:len(); --reinit
Lk=tonumber(Lk);
while Lk>0 do
	if (Lk%2 ~= 0) then
--1
		A:update(B_D)
	else
--0
		A:update(key)
	end;
	Lk=math.floor(Lk/2);
end;


--A:update(BpA);
A_D = A:digest(nil,true);
-------------------
Aint='';
--print("A: "..A_D);
for i=1,A_D:len() do
Aint=Aint..A_D:sub(i,i):byte().." ";
end
print("A: "..Aint)

-------------------

DP = evp.new(algo);
Lk = key:len(); -- reinitialize

for DLk = 1,Lk do
	DP:update(key);
end;

DP_D = DP:digest(nil,true);
------------------------
DPint='';
--print("DP: "..DP_D);
for i=1,DP_D:len() do
DPint=DPint..DP_D:sub(i,i):byte().." ";
end
print("DP: "..DPint)

------------------------
P = ""; 

while Lk>=hashsize do
	P = P..DP_D;
	Lk = Lk-hashsize;
end;

P = P..DP_D:sub(0,Lk);
------------------
Pint='';
--print("P: "..P);
for i=1,P:len() do
Pint=Pint..P:sub(i,i):byte().." ";
end
print("P: "..Pint)

------------------
DS = evp.new(algo);
cnt=0;
for i = 1,16+A_D:byte() do
	DS:update(salt);
	cnt=i;
end;
DS_D = DS:digest(nil,true);
------------------
DSint='';
--print("DS: "..DS_D);
--print("cnt: "..cnt);
for i=1,DS_D:len() do
DSint=DSint..DS_D:sub(i,i):byte().." ";
end
print("DS: "..DSint)

-------------------
S = "";

Ls = salt:len();
while Ls>=hashsize do
	S = S..DS_D;
	Ls = Ls-hashsize;
end;

S = S..DS_D:sub(0,Ls);
----------------
Sint='';
--print("S: "..S);
for i=1,S:len() do
Sint=Sint..S:sub(i,i):byte().." ";
end
print("S: "..Sint)
-----------------------

-- 21. Loop.
C_D = A_D;
for loop = 0,rounds-1 do
--print(loop);
	C = evp.new(algo);
	--CpC = Cprev or A_D;

	if loop%2 ~= 0 then
		C:update(P);
	else
		C:update(C_D);
	end

	if loop%3 ~= 0 then
		C:update(S);
	end
	if loop%7 ~= 0 then
		C:update(P);
	end
	if loop%2 ~= 0 then
		C:update(C_D);
	else
		C:update(P);
	end

	C_D = C:digest(nil,true);
end
----------------
Cint='';
--print("C: "..C_D)
for i=1,C_D:len() do
Cint=Cint..C_D:sub(i,i):byte().." ";
end
print("C: "..Cint)
----------------
return 
--function b64_f24(byte1,byte2,byte3)
--local w = (byte1*(2^16))+(byte2*(2^8))+(byte3);
--end
----for f = 1,C_D:len() do
----print (C_D:sub(f,f):byte());
----end


--Cprev = nil;

--print(mime.b64(C_D));